{
  "name": "Mobileautocomplete",
  "tagline": "autocomplete suggestion mobile-first 自动补全",
  "body": "# mobileAutocomplete\r\n\r\n传统autocomplete插件多数基于PC端，依赖jquery，体积庞大；本插件基于移动设备特性制作，跟DOM元素基本解耦（DOM及样式可完全自定义），拓展性强，压缩后体积只有2KB，非常适合移动应用使用（依赖zeptojs，当然jquery也是可以的）。\r\n\r\n用户在输入框中输入内容的过程中，调用服务端接口，实时将匹配的内容返回并显示出下拉列表，提供给用户选择，提高用户的输入效率，在移动端打字不方便的背景下，该功能的需求非常庞大。\r\n\r\n\r\n----------\r\n\r\n\r\n###展示效果\r\n\r\n![展示效果][1]\r\n\r\n\r\n----------\r\n\r\n###DEMO\r\n\r\n- http://ivinwu.github.io/mobileAutocomplete/remote.html\r\n- http://ivinwu.github.io/mobileAutocomplete/local.html\r\n\r\n\r\n###如何使用\r\nHTML代码：\r\n```html\r\n<input id=\"city\" />\r\n```\r\nJavascript代码：\r\n\r\n1）本地数据模式\r\n```javascript\r\n$('#city').mAutocomplete({\r\n\tsource: ['深圳', '北京', '上海', '杭州', '珠海'],\r\n\tonSelect: function(el) {\r\n\t\talert(el.text());\r\n\t}\r\n})\r\n```\r\n2）远程AJAX请求数据模式\r\n```javascript\r\n$('#city').mAutocomplete({\r\n\tsource: function(request, response) {\r\n\t\t$.ajax({\r\n\t\t\turl: 'http://gd.geobytes.com/AutoCompleteCity',\r\n\t\t\tdata: {\r\n\t\t\t\tq: request.term\r\n\t\t\t},\r\n\t\t\ttype: 'get',\r\n\t\t\tdataType: 'jsonp',\r\n\t\t\tsuccess: function(data) {\r\n\t\t\t\t//由于接口返回的是数组[aa,bb,cc]，因此对其进行对象组装\r\n\t\t\t\tvar array = [];\r\n\t\t\t\tfor(var i = 0; i < data.length; i ++) {\r\n\t\t\t\t\tarray.push({\r\n\t\t\t\t\t\tvalue: data[i],\r\n\t\t\t\t\t\ttitle: data[i]\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t\t//将处理好的数组用response进行回调，此时数组格式为[{value:1,title:aa},{...}]\r\n\t\t\t\tresponse(array);\r\n\t\t\t}\r\n\t\t})\r\n\t},\r\n\tonSelect: function(el) {\r\n\t\talert(el.text());\r\n\t}\r\n})\r\n```\r\n###可配置项：\r\n```javascript\r\n/**\r\n * 默认配置\r\n */\r\nvar defaults = {\r\n\t//当输入字符达minChars时，开始触发autocomplete\r\n\tminChars: 2,\r\n\t//请求配置函数\r\n\tsource: null,\r\n\t//选择选项后触发事件\r\n\tonSelect: null,\r\n\t//当input聚焦时，是否自动将input滚动到页面顶部（防止移动设备弹出键盘挡住）\r\n\tscrollOnFocus: true,\r\n\t//最多显示maxItems条匹配记录\r\n\tmaxItems: 10,\r\n\t//input改变后keyboardDelay毫秒后触发服务器请求，防止过于频繁的请求\r\n\tkeyboardDelay: 300,\r\n\t//选择选项后，列表是否自动消失\r\n\tcloseOnSelect: true,\r\n\t//ul的模板\r\n\tulTemplate: '<ul class=\"autocomplete-list\"></ul>',\r\n\t//单独一个选项的模板\r\n\titemTemplate: '<li class=\"autocomplete-item\">{{title}}</li>',\r\n\t//整个ul将插入到parent这个DOM中\r\n\tparent: 'body'\r\n}\r\n```\r\n\r\n####关于配置项parent的说明\r\nparent默认值是body，即默认生成的下拉列表是会append到页面的body下的，如有其他特殊需求，如DOM结构是这样的\r\n```html\r\n<div id=\"autocompleteUl\">\r\n\t<ul class=\"search-list\">\r\n\t\t<li class=\"keyword\">XXXX</li>\r\n\t\t<li class=\"keyword\">XXXX</li>\r\n\t\t...\r\n\t</ul>\r\n</div>\r\n```\r\n则可以在初始化的时候设定parent的值为 “#autocompleteUl”\r\n\r\n####关于配置项ulTemplate和itemTemplate的说明\r\nulTemplate的默认值是`<ul class=\"autocomplete-list\"></ul>`，itemTemplate的默认值是`<li class=\"autocomplete-item\">{{title}}</li>`，如有其他需求，如需上面举例的DOM结构，则可在初始化时候设定\r\n```javascript\r\n{\r\n    ulTemplate: '<ul class=\"search-list\"></ul>',\r\n    itemTemplate: '<li class=\"keyword\">{{title}}</li>'\r\n}\r\n```\r\n####关于配置项onSelect的说明\r\n该配置项为函数，指定了用户点击了某个下拉列表后会触发的事件，其中带有一个参数el为用户点击项的DOM对象，可通过往列表DOM中的属性种入各种自定义值，并在onSelect触发时从DOM属性中取出使用。如\r\n```javascript\r\nonSelect: function(el) {\r\n\t//打印被选中的选项的value属性\r\n\tconsole.log(el.attr('value'))\r\n}\r\n```\r\n####关于配置项source的说明\r\n该配置项为函数，确定了与服务器之前的接口。该配置参照了JqueryUI中的Autocomplete，有两个参数`request`和`response`，其中`request.term`中装载着当前input的值，而返回的结果需要用`response`进行回调。\r\n```javascript\r\n    source: function(request, response) {\r\n        $.ajax({\r\n            url: 'http://gd.geobytes.com/AutoCompleteCity',\r\n            data: {\r\n                q: request.term\r\n            },\r\n            type: 'get',\r\n            dataType: 'jsonp',\r\n            success: function(data) {\r\n                //由于接口返回的是数组[aa,bb,cc]，因此对其进行对象组装\r\n                var array = [];\r\n                for(var i = 0; i < data.length; i ++) {\r\n                    array.push({\r\n                        value: data[i],\r\n                        title: data[i]\r\n                    })\r\n                }\r\n                //将处理好的数组用response进行回调，此时数组格式为[{value:aa,title:aa},{...}]\r\n                response(array);\r\n            }\r\n        })\r\n    }\r\n```\r\n###Q&A\r\n#### 1. 服务端返回的数据结构跟插件要求的不匹配怎么办？ ####\r\n答：在source配置项中，接受到服务端返回的数据后，可自行对其进行重新组装，在组装好后再将其作为参数调用response即可。注意response的参数必须是数组，且数组的每一项皆为对象，如：`[{value:1,title:aa},{...}]`，此时，在配置项`itemTemplate`中就可以很方便地用`{{value}}`或`{{title}}`进行值的调用从而生成列表。\r\n\r\n\r\n  [1]: http://ivinwu.github.io/mobileAutocomplete/img/demo2.png\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}